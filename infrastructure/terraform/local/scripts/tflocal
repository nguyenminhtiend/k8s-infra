#!/bin/bash

# tflocal - Terraform wrapper for LocalStack
# This script configures Terraform to use LocalStack endpoints

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_info() {
    echo -e "${BLUE}[tflocal]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[tflocal]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[tflocal]${NC} $1"
}

print_error() {
    echo -e "${RED}[tflocal]${NC} $1"
}

# Check if LocalStack is running
check_localstack() {
    if ! curl -s http://localhost:4566/_localstack/health > /dev/null 2>&1; then
        print_error "LocalStack is not running!"
        print_info "Start LocalStack with: docker-compose -f infrastructure/terraform/local/docker-compose.yml up -d"
        exit 1
    fi
    print_success "LocalStack is running"
}

# Create LocalStack provider override file
create_provider_override() {
    local override_file="localstack_providers_override.tf"
    
    print_info "Creating LocalStack provider override..."
    
    cat > "$override_file" << 'EOF'
# LocalStack provider override
# This file is automatically generated by tflocal script

terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 6.2"
    }
  }
}

provider "aws" {
  region                      = "ap-southeast-1"
  access_key                 = "test"
  secret_key                 = "test"
  skip_credentials_validation = true
  skip_metadata_api_check     = true
  skip_requesting_account_id  = true

  endpoints {
    apigateway     = "http://localhost:4566"
    cloudformation = "http://localhost:4566"
    cloudwatch     = "http://localhost:4566"
    cloudwatchlogs = "http://localhost:4566"
    dynamodb       = "http://localhost:4566"
    ec2            = "http://localhost:4566"
    ecs            = "http://localhost:4566"
    eks            = "http://localhost:4566"
    iam            = "http://localhost:4566"
    kinesis        = "http://localhost:4566"
    kms            = "http://localhost:4566"
    lambda         = "http://localhost:4566"
    route53        = "http://localhost:4566"
    s3             = "http://localhost:4566"
    secretsmanager = "http://localhost:4566"
    sns            = "http://localhost:4566"
    sqs            = "http://localhost:4566"
    ssm            = "http://localhost:4566"
    sts            = "http://localhost:4566"
  }
}
EOF

    print_success "Provider override created: $override_file"
}

# Cleanup function
cleanup() {
    local override_file="localstack_providers_override.tf"
    if [[ -f "$override_file" ]]; then
        rm -f "$override_file"
        print_info "Cleaned up provider override file"
    fi
}

# Set trap to cleanup on exit
trap cleanup EXIT

# Main execution
main() {
    print_info "Starting tflocal wrapper..."
    
    # Check if LocalStack is running
    check_localstack
    
    # Create provider override
    create_provider_override
    
    # Set environment variables for LocalStack
    export AWS_ACCESS_KEY_ID="test"
    export AWS_SECRET_ACCESS_KEY="test"
    export AWS_DEFAULT_REGION="ap-southeast-1"
    export AWS_ENDPOINT_URL="http://localhost:4566"
    
    # Run terraform with provided arguments
    print_info "Running terraform with LocalStack configuration..."
    terraform "$@"
    
    local exit_code=$?
    
    if [[ $exit_code -eq 0 ]]; then
        print_success "Terraform command completed successfully"
    else
        print_error "Terraform command failed with exit code $exit_code"
    fi
    
    return $exit_code
}

# Show help if no arguments provided
if [[ $# -eq 0 ]]; then
    echo "tflocal - Terraform wrapper for LocalStack"
    echo ""
    echo "Usage: tflocal <terraform-command> [arguments...]"
    echo ""
    echo "Examples:"
    echo "  tflocal init"
    echo "  tflocal plan"
    echo "  tflocal apply"
    echo "  tflocal destroy"
    echo ""
    echo "Make sure LocalStack is running before using tflocal:"
    echo "  docker-compose -f infrastructure/terraform/local/docker-compose.yml up -d"
    exit 1
fi

# Run main function with all arguments
main "$@"